{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";var userSlice=createSlice({name:\"user\",initialState:{currentUser:null,isFetching:false,error:false},reducers:{loginStart:function loginStart(state){state.isFetching=true;},loginSuccess:function loginSuccess(state,action){state.isFetching=false;state.currentUser=action.payload;},loginFailure:function loginFailure(state){state.isFetching=false;state.error=true;}}});var _userSlice$actions=userSlice.actions,loginStart=_userSlice$actions.loginStart,loginSuccess=_userSlice$actions.loginSuccess,loginFailure=_userSlice$actions.loginFailure;export{loginStart,loginSuccess,loginFailure};export default userSlice.reducer;","map":{"version":3,"sources":["D:/js/resturent/connect/spoffy/src/redux/userRedux.js"],"names":["createSlice","userSlice","name","initialState","currentUser","isFetching","error","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","actions","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,GAAMC,CAAAA,SAAS,CAAGD,WAAW,CAAC,CAC5BE,IAAI,CAAE,MADsB,CAE5BC,YAAY,CAAE,CACZC,WAAW,CAAE,IADD,CAEZC,UAAU,CAAE,KAFA,CAGZC,KAAK,CAAE,KAHK,CAFc,CAO5BC,QAAQ,CAAE,CACRC,UAAU,CAAE,oBAACC,KAAD,CAAW,CACrBA,KAAK,CAACJ,UAAN,CAAmB,IAAnB,CACD,CAHO,CAIRK,YAAY,CAAE,sBAACD,KAAD,CAAQE,MAAR,CAAmB,CAC/BF,KAAK,CAACJ,UAAN,CAAmB,KAAnB,CACAI,KAAK,CAACL,WAAN,CAAoBO,MAAM,CAACC,OAA3B,CACD,CAPO,CAQRC,YAAY,CAAE,sBAACJ,KAAD,CAAW,CACvBA,KAAK,CAACJ,UAAN,CAAmB,KAAnB,CACAI,KAAK,CAACH,KAAN,CAAc,IAAd,CACD,CAXO,CAPkB,CAAD,CAA7B,CAsBO,uBAAmDL,SAAS,CAACa,OAA7D,CAAQN,UAAR,oBAAQA,UAAR,CAAoBE,YAApB,oBAAoBA,YAApB,CAAkCG,YAAlC,oBAAkCA,YAAlC,C,6CACP,cAAeZ,CAAAA,SAAS,CAACc,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    currentUser: null,\r\n    isFetching: false,\r\n    error: false,\r\n  },\r\n  reducers: {\r\n    loginStart: (state) => {\r\n      state.isFetching = true;\r\n    },\r\n    loginSuccess: (state, action) => {\r\n      state.isFetching = false;\r\n      state.currentUser = action.payload;\r\n    },\r\n    loginFailure: (state) => {\r\n      state.isFetching = false;\r\n      state.error = true;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { loginStart, loginSuccess, loginFailure } = userSlice.actions;\r\nexport default userSlice.reducer;"]},"metadata":{},"sourceType":"module"}
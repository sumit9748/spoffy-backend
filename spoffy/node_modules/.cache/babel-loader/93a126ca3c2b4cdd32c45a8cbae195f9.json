{"ast":null,"code":"var _jsxFileName = \"D:\\\\js\\\\resturent\\\\spoffy\\\\src\\\\components\\\\maps\\\\Maps.jsx\";\nimport { withGoogleMap, withScriptjs, GoogleMap, Marker, InfoWindow } from 'react-google-maps';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { createElement as _createElement } from \"react\";\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = address => {\n      this.setState({\n        address\n      });\n    };\n\n    this.handleSelect = address => {\n      geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => this.setState({\n        coords: latLng\n      })).catch(error => console.error('Error', error));\n    };\n\n    this.handleToggleOpen = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.handleToggleClose = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.state = {\n      isOpen: false,\n      coords: {\n        lat: 40.756795,\n        lng: -73.954298\n      },\n      address: ''\n    };\n  }\n\n  render() {\n    const GoogleMapExample = withGoogleMap(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n      defaultCenter: this.state.coords,\n      defaultZoom: 13,\n      children: /*#__PURE__*/_jsxDEV(Marker, {\n        position: this.state.coords,\n        onClick: () => this.handleToggleOpen(),\n        children: this.state.isOpen && /*#__PURE__*/_jsxDEV(InfoWindow, {\n          onCloseClick: this.props.handleCloseCall,\n          options: {\n            maxWidth: 100\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"This is InfoWindow message!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 25\n        }, this)\n      }, this.props.index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(PlacesAutocomplete, {\n        value: this.state.address,\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        children: _ref => {\n          let {\n            getInputProps,\n            suggestions,\n            getSuggestionItemProps,\n            loading\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps({\n                placeholder: 'Search Places ...',\n                className: 'location-search-input'\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"autocomplete-dropdown-container\",\n              children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Loading...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 45\n              }, this), suggestions.map(suggestion => {\n                const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n                const style = suggestion.active ? {\n                  backgroundColor: '#fafafa',\n                  cursor: 'pointer'\n                } : {\n                  backgroundColor: '#ffffff',\n                  cursor: 'pointer'\n                };\n                return /*#__PURE__*/_createElement(\"div\", { ...getSuggestionItemProps(suggestion, {\n                    className,\n                    style\n                  }),\n                  key: suggestion.placeId,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 41\n                  }\n                }, /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: suggestion.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 109,\n                  columnNumber: 45\n                }, this));\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GoogleMapExample, {\n        containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `500px`,\n            width: '500px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 39\n        }, this),\n        mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: `100%`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Map;","map":{"version":3,"sources":["D:/js/resturent/spoffy/src/components/maps/Maps.jsx"],"names":["withGoogleMap","withScriptjs","GoogleMap","Marker","InfoWindow","PlacesAutocomplete","geocodeByAddress","getLatLng","Map","Component","constructor","props","handleChange","address","setState","handleSelect","then","results","latLng","coords","catch","error","console","handleToggleOpen","isOpen","handleToggleClose","state","lat","lng","render","GoogleMapExample","handleCloseCall","maxWidth","index","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","placeId","description","height","width"],"mappings":"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","sourcesContent":["import {\r\n    withGoogleMap,\r\n    withScriptjs,\r\n    GoogleMap,\r\n    Marker,\r\n    InfoWindow\r\n} from 'react-google-maps';\r\n\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng\r\n} from 'react-places-autocomplete';\r\n\r\nclass Map extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOpen: false,\r\n            coords: { lat: 40.756795, lng: -73.954298 },\r\n            address: ''\r\n        };\r\n    }\r\n    handleChange = address => {\r\n        this.setState({ address });\r\n    };\r\n\r\n    handleSelect = address => {\r\n        geocodeByAddress(address)\r\n            .then(results => getLatLng(results[0]))\r\n            .then(latLng =>\r\n                this.setState({\r\n                    coords: latLng\r\n                })\r\n            )\r\n            .catch(error => console.error('Error', error));\r\n    };\r\n\r\n    handleToggleOpen = () => {\r\n        this.setState({\r\n            isOpen: true\r\n        });\r\n    };\r\n\r\n    handleToggleClose = () => {\r\n        this.setState({\r\n            isOpen: false\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const GoogleMapExample = withGoogleMap(props => (\r\n            <GoogleMap defaultCenter={this.state.coords} defaultZoom={13}>\r\n                <Marker\r\n                    key={this.props.index}\r\n                    position={this.state.coords}\r\n                    onClick={() => this.handleToggleOpen()}\r\n                >\r\n                    {this.state.isOpen && (\r\n                        <InfoWindow\r\n                            onCloseClick={this.props.handleCloseCall}\r\n                            options={{ maxWidth: 100 }}\r\n                        >\r\n                            <span>This is InfoWindow message!</span>\r\n                        </InfoWindow>\r\n                    )}\r\n                </Marker>\r\n            </GoogleMap>\r\n        ));\r\n\r\n        return (\r\n            <div>\r\n                <PlacesAutocomplete\r\n                    value={this.state.address}\r\n                    onChange={this.handleChange}\r\n                    onSelect={this.handleSelect}\r\n                >\r\n                    {({\r\n                        getInputProps,\r\n                        suggestions,\r\n                        getSuggestionItemProps,\r\n                        loading\r\n                    }) => (\r\n                        <div>\r\n                            <input\r\n                                {...getInputProps({\r\n                                    placeholder: 'Search Places ...',\r\n                                    className: 'location-search-input'\r\n                                })}\r\n                            />\r\n                            <div className=\"autocomplete-dropdown-container\">\r\n                                {loading && <div>Loading...</div>}\r\n                                {suggestions.map(suggestion => {\r\n                                    const className = suggestion.active\r\n                                        ? 'suggestion-item--active'\r\n                                        : 'suggestion-item';\r\n                                    // inline style for demonstration purpose\r\n                                    const style = suggestion.active\r\n                                        ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                                        : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n                                    return (\r\n                                        <div\r\n                                            {...getSuggestionItemProps(suggestion, {\r\n                                                className,\r\n                                                style\r\n                                            })}\r\n                                            key={suggestion.placeId}\r\n                                        >\r\n                                            <span>{suggestion.description}</span>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </PlacesAutocomplete>\r\n                <GoogleMapExample\r\n                    containerElement={<div style={{ height: `500px`, width: '500px' }} />}\r\n                    mapElement={<div style={{ height: `100%` }} />}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Map;"]},"metadata":{},"sourceType":"module"}